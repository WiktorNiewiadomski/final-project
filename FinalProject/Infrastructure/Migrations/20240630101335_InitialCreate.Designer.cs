// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240630101335_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CoachId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachId = 2,
                            Description = "Zawiera samych słabiaków z naszego klubu",
                            Name = "Grupa słabiaków",
                            Type = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TrainingGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrainingGroupId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Właściciel",
                            Password = "haslo123",
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Trener",
                            Password = "haslo123",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Zawodnik 1",
                            Password = "haslo123",
                            TrainingGroupId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Zawodnik 2",
                            Password = "haslo123",
                            TrainingGroupId = 1,
                            Type = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PreNotes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TrainingEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TrainingStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Trainings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupId = 1,
                            PostNotes = "Po wyjaśnieniu jak biegać nadal nic nie ogarniają",
                            PreNotes = "Trzeba im wyjaśnic na treningu jak się biega bo nie umieją",
                            TrainingEnd = new DateTime(2024, 6, 30, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingStart = new DateTime(2024, 6, 30, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            GroupId = 1,
                            PreNotes = "Podjąć kolejną próbę nauczenia ich biegać",
                            TrainingEnd = new DateTime(2024, 7, 30, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TrainingStart = new DateTime(2024, 7, 30, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.HasOne("Domain.Entities.Member", "Coach")
                        .WithMany("CoachGroups")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.HasOne("Domain.Entities.Group", "TrainingGroup")
                        .WithMany("GroupPlayers")
                        .HasForeignKey("TrainingGroupId");

                    b.Navigation("TrainingGroup");
                });

            modelBuilder.Entity("Domain.Entities.Training", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("GroupTrainings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupPlayers");

                    b.Navigation("GroupTrainings");
                });

            modelBuilder.Entity("Domain.Entities.Member", b =>
                {
                    b.Navigation("CoachGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
